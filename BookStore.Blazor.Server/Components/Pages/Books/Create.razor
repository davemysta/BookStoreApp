@page "/books/create"
@attribute [Authorize(Roles = Roles.Administrator)]
@inject IBookService _bookService
@inject IAuthorService _authorService
@inject NavigationManager _navManager

<h3>Create Book</h3>

<EditForm Model="Book" OnValidSubmit="HandleBookCreate" FormName="CreateBookForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="title">Book Title</label>
        <InputText @bind-Value="Book.Title" class="form-control" id="title" />
        <ValidationMessage For="@(() => Book.Title)" />
    </div>
    <div class="form-group">
        <label for="year">Year</label>
        <InputNumber @bind-Value="Book.Year" class="form-control" id="year" />
        <ValidationMessage For="@(() => Book.Year)" />
    </div>
    <div class="form-group">
        <label for="isbn">Isbn</label>
        <InputText @bind-Value="Book.Isbn" class="form-control" id="isbn" />
        <ValidationMessage For="@(() => Book.Isbn)" />
    </div>
    <div class="form-group">
        <label for="summary">Summary</label>
        <InputTextArea @bind-Value="Book.Summary" class="form-control" id="summary" />
        <ValidationMessage For="@(() => Book.Summary)" />
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber @bind-Value="Book.Price" class="form-control" id="price" />
        <ValidationMessage For="@(() => Book.Price)" />
    </div>
    <div class="form-group">
        <label for="author">Author</label>
        <InputSelect @bind-Value="Book.AuthorId" class="form-select" id="price">
            <option value="">
               -- Select Author --
            </option>
            @foreach(var author in Authors)
            {
                <option value="@author.Id">
                    @author.FirstName @author.LastName
                </option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => Book.AuthorId)" />
    </div>
    <div class="form-group">
        <label for="image">Book Cover Photo</label>
        <InputFile OnChange="HandleFileSelection" id="image" />
        <img src="@img" width="100" height="100" class="img-thumbnail" />
        <p class="text-danger">@UploadFileWarning</p>
    </div>

    <button class="btn btn-primary" type="submit">
        Create Book
    </button>
    <button class="btn btn-outline-secondary" @onclick="BackToList" type="button">
        <i class="bi bi-media-skip-backward"></i> Back to List
    </button>
</EditForm>

@code {
    private BookDTO Book = new();
    private List<AuthorDTO> Authors = new();
    private string UploadFileWarning = string.Empty;
    private string img = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        var response = await _authorService.GetAuthors();
        if (response.Success)
        {
            Authors = response.Data;
        }
    }

    private async Task HandleBookCreate()
    {
        var response = await _bookService.CreateBook(Book);

        if (response.Success == true)
        {
            BackToList();
        }
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if(file != null)
        {
            var ext = System.IO.Path.GetExtension(file.Name);            
            if (ext.ToLower().Contains("jpg") || ext.ToLower().Contains("png") || ext.ToLower().Contains("jpeg"))
            {
                var byteArray = new byte[file.Size];
                await file.OpenReadStream().ReadAsync(byteArray);
                string imageType = file.ContentType;
                string base64String = Convert.ToBase64String(byteArray);

                Book.ImageData = base64String;
                Book.OriginalImageName = file.Name;
                img = $"data:{imageType}; base64, {base64String}";
            }
            else
            {
                UploadFileWarning = "Please select a valid image file jpg or png.";
            }
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/books/");
    }
}
